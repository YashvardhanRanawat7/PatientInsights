{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ai65wyi-6EK6"
      },
      "source": [
        "# PatientInsights : Advancing Patient Care through Enhanced Digital Record Analytics\n",
        "\n",
        "## BA820 Final Project\n",
        "\n",
        "#### Group 14 - Jishnu Moorty , Shivakumar Vinod Pillai , Yashvardhan Singh Ranawat"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RkYpQEEuMpw6"
      },
      "source": [
        "## Project Overview\n",
        "\n",
        "### Problem Statement\n",
        "An estimated 80% of healthcare data is unstructured. The most common sources being clinical notes containing discharge summaries, lab reports , progress notes etc. Translating this data in a structured manner poses a unique challenge due to its inconsistent nature. The same concept can be articulated in numerous ways across different organizations and fields of specialty. Having a complete picture of this information at hand can lead to better care for patients and NLP combined with unsupervised learning can unlock the valuable insights trapped in unstructured data.\n",
        "\n",
        "\n",
        "### Dataset & Data Source\n",
        "Medical Information Mart for Intensive Care (MIMIC-III) Clinical Database. Please find the [link](https://mimic.mit.edu/docs/iii/) here.\n",
        "\n",
        "### Business Relevance\n",
        "- Risk Assessment: Streamlining manual workflows by identifying clinical concepts that indicate complicated conditions, to accurately characterize a patientâ€™s risk\n",
        "- Quality Reporting : Converting unstructured data to provide a more accurate picture of a patient's health status while identifying gaps in care or documentation recorded. .\n",
        "- Clinical Decision Support: Clustering can assist in helping providers make informed decisions through comparing similar cases and their outcomes.\n",
        "- Research and Knowledge Discovery: Researchers can uncover new associations and risk factors by analyzing clusters of patients with similar characteristics.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6JVQ7UGUMpw7"
      },
      "source": [
        "### Data Dictionary"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DqveOsX9Mpw7"
      },
      "source": [
        "### Importing All Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nHJ_EJnuMpw8",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441280179,
          "user_tz": 300,
          "elapsed": 40923,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "9e18cc58-be23-462f-8037-d1d5e63dc337"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "from nltk.corpus import  stopwords\n",
        "import spacy\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g3P08wErMpw8"
      },
      "source": [
        "### Connecting to BigQuery"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "tags": [],
        "id": "83O0w9EjMpw8",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441280179,
          "user_tz": 300,
          "elapsed": 3,
          "user": {
            "displayName": "",
            "userId": ""
          }
        }
      },
      "outputs": [],
      "source": [
        "from google.cloud import bigquery\n",
        "\n",
        "client = bigquery.Client()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WOlPupBHMpw9"
      },
      "source": [
        "### Loading Data\n",
        "\n",
        "This dataset was accesible through bigquery, Since only one member was provided access to use this data, we moved the tables to our own project's dataset. Original dataset is called 'physionet-data' on bigquery"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "97czEnAvMpw9"
      },
      "source": [
        "### Note events Table\n",
        "\n",
        "##### Notes associated with hospital stays.\n",
        "\n",
        "| Column      | Type      | Definition                                                                                   |\n",
        "|-------------|-----------|----------------------------------------------------------------------------------------------|\n",
        "| row_id      | int4      | Unique row identifier.                                                                       |\n",
        "| subject_id  | int4      | Foreign key. Identifies the patient.                                                         |\n",
        "| hadm_id     | int4      | Foreign key. Identifies the hospital stay.                                                   |\n",
        "| chartdate   | timestamp | Date when the note was charted.                                                              |\n",
        "| charttime   | timestamp | Date and time when the note was charted. Notes without a time have NULL in this column.      |\n",
        "| storetime   | timestamp |                                                                                              |\n",
        "| category    | varchar   | Category of the note, e.g., Discharge summary.                                               |\n",
        "| description | varchar   | A more detailed categorization for the note, sometimes entered by free-text.                 |\n",
        "| cgid        | int4      | Foreign key. Identifies the caregiver.                                                       |\n",
        "| iserror     | bpchar    | Flag to highlight an error with the note.                                                    |\n",
        "| text        | text      | Content of the note.                                                                         |\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "tuA6oMuqMpw9",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441319586,
          "user_tz": 300,
          "elapsed": 39409,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "6463a64e-7ba0-4da6-a53e-7760713c9ec9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ROW_ID  SUBJECT_ID  HADM_ID   CHARTDATE           CHARTTIME  \\\n",
              "0  567271       93521   141840  2161-04-16 2161-04-16 11:24:00   \n",
              "1  541580       40183   122960  2143-11-21 2143-11-21 11:48:00   \n",
              "\n",
              "            STORETIME   CATEGORY              DESCRIPTION   CGID  ISERROR  \\\n",
              "0 2161-04-16 11:24:22  Nutrition  Clinical Nutrition Note  19713     <NA>   \n",
              "1 2143-11-21 11:58:02  Nutrition  Clinical Nutrition Note  19713     <NA>   \n",
              "\n",
              "                                                TEXT  \n",
              "0  Subjective\\n   Pt sleeping\\n   Objective\\n   H...  \n",
              "1  Subjective  n/a\\n   Objective\\n   Height\\n   A...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d7fb2bd-aa95-423c-b91f-f529d65d7c9c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ROW_ID</th>\n",
              "      <th>SUBJECT_ID</th>\n",
              "      <th>HADM_ID</th>\n",
              "      <th>CHARTDATE</th>\n",
              "      <th>CHARTTIME</th>\n",
              "      <th>STORETIME</th>\n",
              "      <th>CATEGORY</th>\n",
              "      <th>DESCRIPTION</th>\n",
              "      <th>CGID</th>\n",
              "      <th>ISERROR</th>\n",
              "      <th>TEXT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>567271</td>\n",
              "      <td>93521</td>\n",
              "      <td>141840</td>\n",
              "      <td>2161-04-16</td>\n",
              "      <td>2161-04-16 11:24:00</td>\n",
              "      <td>2161-04-16 11:24:22</td>\n",
              "      <td>Nutrition</td>\n",
              "      <td>Clinical Nutrition Note</td>\n",
              "      <td>19713</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Subjective\\n   Pt sleeping\\n   Objective\\n   H...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>541580</td>\n",
              "      <td>40183</td>\n",
              "      <td>122960</td>\n",
              "      <td>2143-11-21</td>\n",
              "      <td>2143-11-21 11:48:00</td>\n",
              "      <td>2143-11-21 11:58:02</td>\n",
              "      <td>Nutrition</td>\n",
              "      <td>Clinical Nutrition Note</td>\n",
              "      <td>19713</td>\n",
              "      <td>&lt;NA&gt;</td>\n",
              "      <td>Subjective  n/a\\n   Objective\\n   Height\\n   A...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d7fb2bd-aa95-423c-b91f-f529d65d7c9c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d7fb2bd-aa95-423c-b91f-f529d65d7c9c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d7fb2bd-aa95-423c-b91f-f529d65d7c9c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f8edf6d8-b6fc-4c5d-ad69-503a93263f77\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f8edf6d8-b6fc-4c5d-ad69-503a93263f77')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f8edf6d8-b6fc-4c5d-ad69-503a93263f77 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "noteevents_query = ('''SELECT *  FROM `ba820-unsup-ml.mimic3.noteevents` ''')\n",
        "\n",
        "noteevents_data = client.query(noteevents_query).to_dataframe()\n",
        "\n",
        "noteevents_data.head(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tj7iEXSQMpw9"
      },
      "source": [
        "### Patients Data\n",
        "\n",
        "##### Patients associated with an admission to the ICU.\n",
        "\n",
        "| Column      | Type       | Definition                                                                                   |\n",
        "|-------------|------------|----------------------------------------------------------------------------------------------|\n",
        "| row_id      | int4       | Unique row identifier.                                                                       |\n",
        "| subject_id  | int4       | Primary key. Identifies the patient.                                                         |\n",
        "| gender      | varchar    | Gender.                                                                                      |\n",
        "| dob         | timestamp  | Date of birth.                                                                               |\n",
        "| dod         | timestamp  | Date of death. Null if the patient was alive at least 90 days post hospital discharge.       |\n",
        "| dod_hosp    | timestamp  | Date of death recorded in the hospital records.                                              |\n",
        "| dod_ssn     | timestamp  | Date of death recorded in the social security records.                                       |\n",
        "| expire_flag | int4       | Flag indicating that the patient has died.                                                   |"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "WADeJt7BMpw9",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441324560,
          "user_tz": 300,
          "elapsed": 5003,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "83b84e79-9949-4ac6-dd86-71916126f9c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ROW_ID  SUBJECT_ID GENDER        DOB        DOD   DOD_HOSP    DOD_SSN  \\\n",
              "0   46038       98139      F 2035-02-19 2116-05-24 2116-05-24 2116-05-24   \n",
              "1     156         166      F 1805-01-23 2105-01-24 2105-01-24 2105-01-24   \n",
              "\n",
              "   EXPIRE_FLAG  \n",
              "0            1  \n",
              "1            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8136a8a6-075c-4856-9bbe-058d0109974d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ROW_ID</th>\n",
              "      <th>SUBJECT_ID</th>\n",
              "      <th>GENDER</th>\n",
              "      <th>DOB</th>\n",
              "      <th>DOD</th>\n",
              "      <th>DOD_HOSP</th>\n",
              "      <th>DOD_SSN</th>\n",
              "      <th>EXPIRE_FLAG</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>46038</td>\n",
              "      <td>98139</td>\n",
              "      <td>F</td>\n",
              "      <td>2035-02-19</td>\n",
              "      <td>2116-05-24</td>\n",
              "      <td>2116-05-24</td>\n",
              "      <td>2116-05-24</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>156</td>\n",
              "      <td>166</td>\n",
              "      <td>F</td>\n",
              "      <td>1805-01-23</td>\n",
              "      <td>2105-01-24</td>\n",
              "      <td>2105-01-24</td>\n",
              "      <td>2105-01-24</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8136a8a6-075c-4856-9bbe-058d0109974d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8136a8a6-075c-4856-9bbe-058d0109974d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8136a8a6-075c-4856-9bbe-058d0109974d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-150fe36f-af26-4789-9538-dae4341c1a46\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-150fe36f-af26-4789-9538-dae4341c1a46')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-150fe36f-af26-4789-9538-dae4341c1a46 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "patient_query = ('''SELECT *\n",
        "                FROM `ba820-unsup-ml.mimic3.patients`''')\n",
        "\n",
        "patient_data = client.query(patient_query).to_dataframe()\n",
        "\n",
        "patient_data.head(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "txeT6S3bMpw9"
      },
      "source": [
        "### Admissions Data\n",
        "\n",
        "##### Hospital admissions associated with an ICU stay.\n",
        "\n",
        "| Column               | Type      | Definition                                                                                   |\n",
        "|----------------------|-----------|----------------------------------------------------------------------------------------------|\n",
        "| row_id               | int4      | Unique row identifier.                                                                       |\n",
        "| subject_id           | int4      | Foreign key. Identifies the patient.                                                         |\n",
        "| hadm_id              | int4      | Primary key. Identifies the hospital stay.                                                   |\n",
        "| admittime            | timestamp | Time of admission to the hospital.                                                           |\n",
        "| dischtime            | timestamp | Time of discharge from the hospital.                                                         |\n",
        "| deathtime            | timestamp | Time of death.                                                                               |\n",
        "| admission_type       | varchar   | Type of admission, for example emergency or elective.                                        |\n",
        "| admission_location   | varchar   | Admission location.                                                                          |\n",
        "| discharge_location   | varchar   | Discharge location                                                                           |\n",
        "| insurance            | varchar   | Insurance type.                                                                              |\n",
        "| language             | varchar   | Language.                                                                                    |\n",
        "| religion             | varchar   | Religion.                                                                                    |\n",
        "| marital_status       | varchar   | Marital status.                                                                              |\n",
        "| ethnicity            | varchar   | Ethnicity.                                                                                   |\n",
        "| edregtime            | timestamp |                                                                                              |\n",
        "| edouttime            | timestamp |                                                                                              |\n",
        "| diagnosis            | varchar   | Diagnosis.                                                                                   |\n",
        "| hospital_expire_flag | int2      |                                                                                              |\n",
        "| has_chartevents_data | int2      | Hospital admission has at least one observation in the CHARTEVENTS table.                    |\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "id": "_NvO9_27Mpw9",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441330331,
          "user_tz": 300,
          "elapsed": 5775,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "f6ada7ad-86e1-42bc-fd0f-9bb45637eaf6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   ROW_ID  SUBJECT_ID  HADM_ID           ADMITTIME           DISCHTIME  \\\n",
              "0   40230       41420   143206 2147-01-06 16:57:00 2147-01-08 18:30:00   \n",
              "1   45890       58899   177890 2102-04-04 08:12:00 2102-04-10 16:00:00   \n",
              "\n",
              "  DEATHTIME ADMISSION_TYPE    ADMISSION_LOCATION DISCHARGE_LOCATION INSURANCE  \\\n",
              "0       NaT      EMERGENCY  EMERGENCY ROOM ADMIT                ICF  Medicare   \n",
              "1       NaT      EMERGENCY  EMERGENCY ROOM ADMIT                ICF  Medicare   \n",
              "\n",
              "  LANGUAGE       RELIGION MARITAL_STATUS ETHNICITY           EDREGTIME  \\\n",
              "0     ENGL         JEWISH        WIDOWED     WHITE 2147-01-06 13:30:00   \n",
              "1     ENGL  NOT SPECIFIED         SINGLE     WHITE 2102-04-04 06:46:00   \n",
              "\n",
              "            EDOUTTIME                        DIAGNOSIS  HOSPITAL_EXPIRE_FLAG  \\\n",
              "0 2147-01-06 17:36:00          ACUTE SUBDURAL HEMATOMA                     0   \n",
              "1 2102-04-04 08:33:00  THREATENED LEFT LOWER EXTREMITY                     0   \n",
              "\n",
              "   HAS_CHARTEVENTS_DATA  \n",
              "0                     1  \n",
              "1                     1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1171bf1b-4fbb-46dd-ad1d-3c63eaacd525\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ROW_ID</th>\n",
              "      <th>SUBJECT_ID</th>\n",
              "      <th>HADM_ID</th>\n",
              "      <th>ADMITTIME</th>\n",
              "      <th>DISCHTIME</th>\n",
              "      <th>DEATHTIME</th>\n",
              "      <th>ADMISSION_TYPE</th>\n",
              "      <th>ADMISSION_LOCATION</th>\n",
              "      <th>DISCHARGE_LOCATION</th>\n",
              "      <th>INSURANCE</th>\n",
              "      <th>LANGUAGE</th>\n",
              "      <th>RELIGION</th>\n",
              "      <th>MARITAL_STATUS</th>\n",
              "      <th>ETHNICITY</th>\n",
              "      <th>EDREGTIME</th>\n",
              "      <th>EDOUTTIME</th>\n",
              "      <th>DIAGNOSIS</th>\n",
              "      <th>HOSPITAL_EXPIRE_FLAG</th>\n",
              "      <th>HAS_CHARTEVENTS_DATA</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>40230</td>\n",
              "      <td>41420</td>\n",
              "      <td>143206</td>\n",
              "      <td>2147-01-06 16:57:00</td>\n",
              "      <td>2147-01-08 18:30:00</td>\n",
              "      <td>NaT</td>\n",
              "      <td>EMERGENCY</td>\n",
              "      <td>EMERGENCY ROOM ADMIT</td>\n",
              "      <td>ICF</td>\n",
              "      <td>Medicare</td>\n",
              "      <td>ENGL</td>\n",
              "      <td>JEWISH</td>\n",
              "      <td>WIDOWED</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>2147-01-06 13:30:00</td>\n",
              "      <td>2147-01-06 17:36:00</td>\n",
              "      <td>ACUTE SUBDURAL HEMATOMA</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>45890</td>\n",
              "      <td>58899</td>\n",
              "      <td>177890</td>\n",
              "      <td>2102-04-04 08:12:00</td>\n",
              "      <td>2102-04-10 16:00:00</td>\n",
              "      <td>NaT</td>\n",
              "      <td>EMERGENCY</td>\n",
              "      <td>EMERGENCY ROOM ADMIT</td>\n",
              "      <td>ICF</td>\n",
              "      <td>Medicare</td>\n",
              "      <td>ENGL</td>\n",
              "      <td>NOT SPECIFIED</td>\n",
              "      <td>SINGLE</td>\n",
              "      <td>WHITE</td>\n",
              "      <td>2102-04-04 06:46:00</td>\n",
              "      <td>2102-04-04 08:33:00</td>\n",
              "      <td>THREATENED LEFT LOWER EXTREMITY</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1171bf1b-4fbb-46dd-ad1d-3c63eaacd525')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1171bf1b-4fbb-46dd-ad1d-3c63eaacd525 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1171bf1b-4fbb-46dd-ad1d-3c63eaacd525');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4b092209-74ad-42ae-8e09-d8ada3bc49b7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4b092209-74ad-42ae-8e09-d8ada3bc49b7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4b092209-74ad-42ae-8e09-d8ada3bc49b7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "admissions_query = ('''SELECT *\n",
        "                FROM `ba820-unsup-ml.mimic3.admissions`''')\n",
        "\n",
        "admissions_data = client.query(admissions_query).to_dataframe()\n",
        "\n",
        "admissions_data.head(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r86Di1NpMpw-"
      },
      "source": [
        "### EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "lObCXF1NMpw-",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441334176,
          "user_tz": 300,
          "elapsed": 3849,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "68576070-3ee8-4053-ab72-e60563e072f5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Creating a countplot for Notes by Category\n",
        "category_counts = noteevents_data['CATEGORY'].value_counts().sort_values(ascending=False)\n",
        "\n",
        "top_5_categories = category_counts.head(5)\n",
        "sns.countplot(data=noteevents_data, x='CATEGORY', order=top_5_categories.index)\n",
        "\n",
        "plt.xlabel('CATEGORY')\n",
        "plt.ylabel('COUNT OF NOTES')\n",
        "plt.title('Top 5 Categories by Count of Notes')\n",
        "plt.xticks(rotation=75)\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "HlRSGvVPMpw-",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1709441334773,
          "user_tz": 300,
          "elapsed": 602,
          "user": {
            "displayName": "",
            "userId": ""
          }
        },
        "outputId": "51bfcd20-3b8b-4ecf-8681-65fbaa32110b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-7-b4d51aa6aedf>:3: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(data=patient_data, x='GENDER', palette='Set2')\n",
            "/usr/local/lib/python3.10/dist-packages/seaborn/_base.py:949: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
            "  data_subset = grouped_data.get_group(pd_key)\n",
            "/usr/local/lib/python3.10/dist-packages/seaborn/_base.py:949: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
            "  data_subset = grouped_data.get_group(pd_key)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.set(style=\"whitegrid\")\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=patient_data, x='GENDER', palette='Set2')\n",
        "plt.title('Distribution of Gender')\n",
        "plt.xlabel('Gender')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "\n",
        "plt.clf()\n",
        "gender_counts = patient_data['GENDER'].value_counts()\n",
        "plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', colors=sns.color_palette('Set2'))\n",
        "plt.title('Gender Distribution of Patients')\n",
        "plt.axis('equal')\n",
        "plt.legend(title='Gender', loc='upper right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S2DkB2sSMpw-"
      },
      "outputs": [],
      "source": [
        "#Creating Word Cloud to understand the data\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Concatenate all text from the 'TEXT' column into a single string\n",
        "notes_corpus = ' '.join(noteevents_data[noteevents_data['CATEGORY']=='Nursing/other']['TEXT'])\n",
        "\n",
        "# Generate a word cloud from the concatenated text\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate(notes_corpus)\n",
        "\n",
        "# Plot the word cloud\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.title('Word Cloud for Nursing and Other')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dShwY8dBMpw-"
      },
      "outputs": [],
      "source": [
        "#Creating Word Cloud to understand the data\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Concatenate all text from the 'TEXT' column into a single string\n",
        "notes_corpus = ' '.join(noteevents_data[noteevents_data['CATEGORY']=='Radiology']['TEXT'])\n",
        "\n",
        "\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate(notes_corpus)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.title('Word Cloud for Radiology')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QEmZPsLUMpw-"
      },
      "outputs": [],
      "source": [
        "#Creating Word Cloud to understand the data\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Concatenate all text from the 'TEXT' column into a single string\n",
        "notes_corpus = ' '.join(noteevents_data[noteevents_data['CATEGORY']=='ECG']['TEXT'])\n",
        "\n",
        "\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate(notes_corpus)\n",
        "\n",
        "\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.title('Word Cloud for ECG')\n",
        "plt.axis('off')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pK0KD6Z3Mpw-"
      },
      "source": [
        "### Pre-processing Text Data - We had to sample due to resource and time constraints\n",
        "\n",
        "##### Removing Punctuations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tJ-oaKsNMpw-"
      },
      "outputs": [],
      "source": [
        "noteevents_query = ('''SELECT *  FROM `ba820-unsup-ml.mimic3.noteevents` TABLESAMPLE SYSTEM (3 PERCENT)''')\n",
        "\n",
        "noteevents_data = client.query(noteevents_query).to_dataframe()\n",
        "\n",
        "noteevents_data.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "HYhHBnIhMpw-"
      },
      "outputs": [],
      "source": [
        "def remove_punc(column):\n",
        "    punc_pattern = r'[^\\w\\s]'\n",
        "    column = re.sub(punc_pattern,\"\", column)\n",
        "    return column\n",
        "\n",
        "\n",
        "noteevents_data['text_cleaned'] = noteevents_data['TEXT'].apply(remove_punc)\n",
        "\n",
        "noteevents_data[['TEXT','text_cleaned']].head(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDqaeq6OMpw_"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "nWXr0mRWMpw_"
      },
      "outputs": [],
      "source": [
        "def remove_newlines(column):\n",
        "    newline_pattern = r'\\n'\n",
        "    return re.sub(newline_pattern, \"\", column)\n",
        "\n",
        "noteevents_data['text_cleaned'] = noteevents_data['text_cleaned'].apply(remove_newlines)\n",
        "\n",
        "noteevents_data[['TEXT','text_cleaned']].head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "nwqok39QMpw_"
      },
      "outputs": [],
      "source": [
        "def remove_common_words(column):\n",
        "    pattern = r'\\b(?:First Name|Last Name|NamePattern1|firstname|lastname|name|TITLE)\\b'\n",
        "    return re.sub(pattern, \"\", column)\n",
        "\n",
        "noteevents_data['text_cleaned'] = noteevents_data['text_cleaned'].apply(remove_common_words)\n",
        "\n",
        "noteevents_data[['TEXT','text_cleaned']].head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "xrGrkn2XMpw_"
      },
      "outputs": [],
      "source": [
        "def remove_abbreviation(column):\n",
        "    # Pattern to match 'Dr.' optionally followed by a space\n",
        "    pattern = r'\\bDr\\.\\s?'\n",
        "    return re.sub(pattern, \"\", column)\n",
        "\n",
        "\n",
        "noteevents_data['text_cleaned'] = noteevents_data['text_cleaned'].apply(remove_abbreviation)\n",
        "\n",
        "noteevents_data[['TEXT','text_cleaned']].head(2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from multiprocessing import Pool\n",
        "\n",
        "# Download necessary NLTK datasets\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# Function to remove stop words from a single document\n",
        "def remove_stop_words(document):\n",
        "    tokens = word_tokenize(document)\n",
        "    filtered_tokens = [word for word in tokens if word.lower() not in stop_words]\n",
        "    return ' '.join(filtered_tokens)\n",
        "\n",
        "# Apply the function in parallel to the list of documents\n",
        "if __name__ == '__main__':\n",
        "    with Pool(processes=4) as pool:  # Adjust the number of processes as needed\n",
        "        noteevents_data['text_cleaned'] = pool.map(remove_stop_words, noteevents_data['text_cleaned'])\n",
        "\n"
      ],
      "metadata": {
        "id": "ybTPs3i1oeot"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mViML5LxMpw_"
      },
      "outputs": [],
      "source": [
        "import nltk\n",
        "import pandas as pd\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "# Ensure necessary NLTK downloads\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "nltk.download('stopwords')\n",
        "\n",
        "def preprocess_text(text):\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "    # Tokenize\n",
        "    tokens = word_tokenize(text)\n",
        "    # Remove stopwords and lemmatize\n",
        "    cleaned_tokens = [lemmatizer.lemmatize(word.lower()) for word in tokens if word.lower() not in stop_words and word.isalpha()]\n",
        "\n",
        "    return cleaned_tokens\n",
        "\n",
        "noteevents_data['text_cleaned'] = noteevents_data['text_cleaned'].apply(preprocess_text)\n",
        "\n",
        "noteevents_data[['TEXT','text_cleaned']].head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "fxckZIaRMpw_"
      },
      "outputs": [],
      "source": [
        "from gensim.corpora import Dictionary\n",
        "\n",
        "\n",
        "dictionary = Dictionary(noteevents_data['text_cleaned'])\n",
        "\n",
        "# Convert document into the bag-of-words (BoW) format = list of (token_id, token_count) tuples\n",
        "corpus = [dictionary.doc2bow(text) for text in noteevents_data['text_cleaned']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "3eKd1zTLMpw_"
      },
      "outputs": [],
      "source": [
        "!pip install gensim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "LccgrxHuMpw_"
      },
      "outputs": [],
      "source": [
        "from gensim.models import LdaModel\n",
        "\n",
        "# Number of topics\n",
        "num_topics = 5\n",
        "\n",
        "# Build LDA model\n",
        "lda_model = LdaModel(corpus=corpus,\n",
        "                     id2word=dictionary,\n",
        "                     num_topics=num_topics,\n",
        "                     random_state=100,\n",
        "                     update_every=0,\n",
        "                     chunksize=100,\n",
        "                     passes=5,\n",
        "                     alpha='auto')\n",
        "\n",
        "# Print the topics found by the model\n",
        "for idx, topic in lda_model.print_topics(-1):\n",
        "    print(\"Topic: {} \\nWords: {}\".format(idx, topic))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "NLEhcQRdMpw_"
      },
      "outputs": [],
      "source": [
        "!pip install pyLDAvis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "tags": [],
        "id": "zXU3k7CLMpw_"
      },
      "outputs": [],
      "source": [
        "import pyLDAvis\n",
        "import pyLDAvis.gensim_models as gensimvis\n",
        "\n",
        "pyLDAvis.enable_notebook()\n",
        "\n",
        "# Prepare visualization for the LDA model\n",
        "vis = gensimvis.prepare(lda_model, corpus, dictionary)\n",
        "pyLDAvis.display(vis)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "environment": {
      "kernel": "python3",
      "name": "common-gpu.m116",
      "type": "gcloud",
      "uri": "gcr.io/deeplearning-platform-release/base-gpu:m116"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}